#Bot de sorteio do telegram

**Codigo feito pelo chatgpt** 
Utilizei o gpt para fins de estudo e testes para o meu portfolio, este não é o codigo original

**TOKEN = 'SEU_TOKEN_AQUI'**

import json, random, asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from config import TOKEN

# Dados temporários dos sorteios
sorteios_ativos = {}

async def start_sorteio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat = update.effective_chat

    if not (await chat.get_member(user.id)).status in ["creator", "administrator"]:
        await update.message.reply_text("🚫 Apenas administradores podem criar sorteios.")
        return

    try:
        tempo = int(context.args[0])
        ganhadores = int(context.args[1])
    except (IndexError, ValueError):
        await update.message.reply_text("Uso correto: /sorteio <minutos> <número_de_ganhadores>")
        return

    texto = f"🎉 **SORTEIO INICIADO!** 🎉\n\nClique no botão abaixo para participar!\n\n⏳ Tempo: {tempo} minutos\n🏆 Ganhadores: {ganhadores}"
    teclado = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton("🎁 Participar", callback_data="participar")
    )
    
    msg = await update.message.reply_text(texto, reply_markup=teclado, parse_mode="Markdown")
    sorteios_ativos[msg.message_id] = {
        "participantes": set(),
        "chat_id": chat.id,
        "message_id": msg.message_id,
        "tempo": tempo,
        "ganhadores": ganhadores
    }

    # Espera o tempo definido e sorteia
    await asyncio.sleep(tempo * 60)
    await encerrar_sorteio(msg.message_id, context)

async def participar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    await query.answer()

    dados = sorteios_ativos.get(query.message.message_id)
    if not dados:
        await query.answer("❌ Esse sorteio já foi encerrado.")
        return

    dados["participantes"].add(user.mention_html())
    await query.answer("✅ Participação registrada!", show_alert=True)

async def encerrar_sorteio(message_id, context):
    dados = sorteios_ativos.pop(message_id, None)
    if not dados:
        return

    participantes = list(dados["participantes"])
    chat_id = dados["chat_id"]
    ganhadores = dados["ganhadores"]

    if len(participantes) == 0:
        await context.bot.send_message(chat_id, "Ninguém participou do sorteio 😢")
        return

    sorteados = random.sample(participantes, min(ganhadores, len(participantes)))
    texto = "🏁 **SORTEIO ENCERRADO!** 🏁\n\n🎉 Ganhadores:\n" + "\n".join(sorteados)
    await context.bot.send_message(chat_id, texto, parse_mode="HTML")

# Inicia o bot
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("sorteio", start_sorteio))
app.add_handler(CallbackQueryHandler(participar, pattern="participar"))

app.run_polling()
